module Test.Main where

import Prelude

import Effect (Effect)
import Effect.Aff (launchAff_)
import Node.Encoding (Encoding(..))
import Node.FS.Aff (readTextFile)
import Test.Spec (describe, it, pending')
import Test.Spec.Assertions (shouldEqual)
import Test.Spec.Reporter.Console (consoleReporter)
import Test.Spec.Runner (runSpec)

main :: Effect Unit
main = launchAff_ $ runSpec [consoleReporter] do
  describe "Given local png file" do
    it "then can convert it to base64 image uri" do
      base64ImageString <- readTextFile Base64 "/Users/tricktron/github/my-repos/qr-and-bar-code/purescript-core/test/resources/cbimage.png"
      let expectedBase64String = "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"
      base64ImageString `shouldEqual` expectedBase64String
    pending' "then can extract qr code and convert it back to base64 image or arrayBuffer" do
      base64QrCode <- readTextFile Base64 "/Users/tricktron/github/my-repos/qr-and-bar-code/purescript-core/test/resources/cbimage.png"
      base64QrCode `shouldEqual` "abc"
      