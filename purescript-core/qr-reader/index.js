// Generated by purs bundle 0.14.4
var PS = {};
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var apply = function (dict) {
      return dict.apply;
  };
  exports["apply"] = apply;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];          
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var bind = function (dict) {
      return dict.bind;
  };
  exports["bind"] = bind;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["ap"] = ap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];                
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  exports["Left"] = Left;
  exports["Right"] = Right;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Bifunctor"] = $PS["Data.Bifunctor"] || {};
  var exports = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];              
  var bimap = function (dict) {
      return dict.bimap;
  };
  var bifunctorEither = {
      bimap: function (v) {
          return function (v1) {
              return function (v2) {
                  if (v2 instanceof Data_Either.Left) {
                      return new Data_Either.Left(v(v2.value0));
                  };
                  if (v2 instanceof Data_Either.Right) {
                      return new Data_Either.Right(v1(v2.value0));
                  };
                  throw new Error("Failed pattern match at Data.Bifunctor (line 32, column 1 - line 34, column 36): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
              };
          };
      }
  };
  exports["bimap"] = bimap;
  exports["bifunctorEither"] = bifunctorEither;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];                 
  var map = function (dict) {
      return dict.map;
  };
  exports["map"] = map;
})(PS);
(function(exports) {
  "use strict";

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var showNumber = {
      show: $foreign.showNumberImpl
  };
  var show = function (dict) {
      return dict.show;
  };
  exports["show"] = show;
  exports["showNumber"] = showNumber;
})(PS);
(function(exports) {
  "use strict";

  exports.replace = function (s1) {
    return function (s2) {
      return function (s3) {
        return s3.replace(s1, s2);
      };
    };
  };
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.String.Common"] = $PS["Data.String.Common"] || {};
  var exports = $PS["Data.String.Common"];
  var $foreign = $PS["Data.String.Common"];
  exports["replace"] = $foreign.replace;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad = $PS["Control.Monad"];                  
  var monadEffect = {
      Applicative0: function () {
          return applicativeEffect;
      },
      Bind1: function () {
          return bindEffect;
      }
  };
  var bindEffect = {
      bind: $foreign.bindE,
      Apply0: function () {
          return applyEffect;
      }
  };
  var applyEffect = {
      apply: Control_Monad.ap(monadEffect),
      Functor0: function () {
          return functorEffect;
      }
  };
  var applicativeEffect = {
      pure: $foreign.pureE,
      Apply0: function () {
          return applyEffect;
      }
  };
  var functorEffect = {
      map: Control_Applicative.liftA1(applicativeEffect)
  };
  exports["functorEffect"] = functorEffect;
  exports["applicativeEffect"] = applicativeEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.message = function (e) {
    return e.message;
  };

  exports.catchException = function (c) {
    return function (t) {
      return function () {
        try {
          return t();
        } catch (e) {
          if (e instanceof Error || Object.prototype.toString.call(e) === "[object Error]") {
            return c(e)();
          } else {
            return c(new Error(e.toString()))();
          }
        }
      };
    };
  };
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect.Exception"] = $PS["Effect.Exception"] || {};
  var exports = $PS["Effect.Exception"];
  var $foreign = $PS["Effect.Exception"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];                
  var $$try = function (action) {
      return $foreign.catchException((function () {
          var $0 = Control_Applicative.pure(Effect.applicativeEffect);
          return function ($1) {
              return $0(Data_Either.Left.create($1));
          };
      })())(Data_Functor.map(Effect.functorEffect)(Data_Either.Right.create)(action));
  };
  exports["try"] = $$try;
  exports["message"] = $foreign.message;
})(PS);
(function(exports) {
  "use strict";

  const { MultiFormatReader, RGBLuminanceSource, BinaryBitmap, HybridBinarizer, DecodeHintType, BarcodeFormat } = require('@zxing/library');
  const jsQR = require('jsqr');
  const qrCodeGenerator = require('qrcode-generator');
  const { UPNG } = require('upng');

  function scanBarcode(rgbaBuffer, width, height) {
      const hints = new Map();
      const formats = [BarcodeFormat.EAN_13, BarcodeFormat.EAN_8];
      hints.set(DecodeHintType.POSSIBLE_FORMATS, formats);
      const reader = new MultiFormatReader(hints);
      const luminances = toGrayscaleBuffer(rgbaBuffer, width, height);
      const luminanceSource = new RGBLuminanceSource(luminances, width, height);
      const binaryBitmap = new BinaryBitmap(new HybridBinarizer(luminanceSource));
      return reader.decode(binaryBitmap);
  }

  function toGrayscaleBuffer(imageBuffer, width, height) {
      /*Zxing works with grayscale images. They use a green-favoring average:
    https://github.com/zxing/zxing/blob/be2c5bdd883f9f42e794e4b0e7e1b30f436fc0a7/core/src/main/java/com/google/zxing/RGBLuminanceSource.java#L42-L56
    */  
      const size = width * height;
      let greys = new Uint8ClampedArray(size);
      for (let i = 0; i < size; i++) {
          let red = imageBuffer[i * 4];
          let doubleGreen = imageBuffer[i * 4 + 1] * 2;
          let blue = imageBuffer[i * 4 + 2];
          greys[i] = (red + doubleGreen + blue) / 4;
      }
      return greys;
  }

  function b64ToUint6(nChr) {
      return nChr > 64 && nChr < 91 ?
          nChr - 65
          : nChr > 96 && nChr < 123 ?
              nChr - 71
              : nChr > 47 && nChr < 58 ?
                  nChr + 4
                  : nChr === 43 ?
                      62
                      : nChr === 47 ?
                          63
                          :
                          0;
  }

  exports.scanQrCodeEffImpl = image => () => {
      const qr = jsQR(image.rgbaPixels, image.width, image.height);
      if (qr) {
          return qr.data;
      } else {
          throw new Error("QR code could not be read");
      }
  }

  exports.scanBarcodeImpl = left => right => barcode => rgbaBuffer => width => height => {
      try {
          const res = scanBarcode(rgbaBuffer, width, height);
          return right(barcode(res.text));
      } catch (err) {
          return left("Barcode could not be read");
      }
  }

  exports.createBase64PNGQrCodeImpl = text => size => {
      const qr = qrCodeGenerator(0, 'L');
      qr.addData(text);
      qr.make();
      const qrModuleSize = size / (qr.getModuleCount() + 8);
      const margin = 4 * qrModuleSize;
      const base64GifQrImage = qr.createDataURL(qrModuleSize, margin);
      return base64GifQrImage.replace("data:image/gif", "data:image/png");
  }

  exports.decodePngImpl = arrayBuffer => {
      const image = UPNG.decode(arrayBuffer);
      const rgba = UPNG.toRGBA8(image);
      const rgbaPixels = new Uint8ClampedArray(rgba[0]);
      return {
          width: image.width,
          height: image.height,
          rgbaPixels: rgbaPixels
      };
  }

  exports.convertBase64StringToArrayBufferImpl = sBase64 => {
      var
          sB64Enc = sBase64.replace(/[^A-Za-z0-9\+\/]/g, ""), nInLen = sB64Enc.length,
          nOutLen = nInLen * 3 + 1 >> 2, taBytes = new Uint8Array(nOutLen);
      for (var nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {
          nMod4 = nInIdx & 3;
          nUint24 |= b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 6 * (3 - nMod4);
          if (nMod4 === 3 || nInLen - nInIdx === 1) {
              for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {
                  taBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;
              }
              nUint24 = 0;
          }
      }
      return taBytes.buffer;
  }
})(PS["QrReader"] = PS["QrReader"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["QrReader"] = $PS["QrReader"] || {};
  var exports = $PS["QrReader"];
  var $foreign = $PS["QrReader"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Effect = $PS["Effect"];
  var Effect_Exception = $PS["Effect.Exception"];                
  var Image = function (x) {
      return x;
  };
  var QrCode = (function () {
      function QrCode(value0) {
          this.value0 = value0;
      };
      QrCode.create = function (value0) {
          return new QrCode(value0);
      };
      return QrCode;
  })();
  var Barcode = (function () {
      function Barcode(value0) {
          this.value0 = value0;
      };
      Barcode.create = function (value0) {
          return new Barcode(value0);
      };
      return Barcode;
  })();
  var showImage = {
      show: function (v) {
          return "{ width: " + (Data_Show.show(Data_Show.showNumber)(v.width) + (", height: " + (Data_Show.show(Data_Show.showNumber)(v.height) + " }")));
      }
  };
  var showCode = {
      show: function (v) {
          if (v instanceof Barcode) {
              return "Barcode { " + (v.value0 + " }");
          };
          if (v instanceof QrCode) {
              return "QrCode { " + (v.value0 + " }");
          };
          throw new Error("Failed pattern match at QrReader (line 28, column 1 - line 31, column 47): " + [ v.constructor.name ]);
      }
  };
  var scanBarcode = function (rgbaBuffer) {
      return function (width) {
          return function (height) {
              return $foreign.scanBarcodeImpl(Data_Either.Left.create)(Data_Either.Right.create)(Barcode.create)(rgbaBuffer)(width)(height);
          };
      };
  };
  var eqImage = {
      eq: function (v) {
          return function (v1) {
              return v.width === v1.width && v.height === v1.height;
          };
      }
  };
  var eqCode = {
      eq: function (v) {
          return function (v1) {
              if (v instanceof Barcode && v1 instanceof Barcode) {
                  return v.value0 === v1.value0;
              };
              if (v instanceof QrCode && v1 instanceof QrCode) {
                  return v.value0 === v1.value0;
              };
              return false;
          };
      }
  };
  var createBase64PNGQrCode = $foreign.createBase64PNGQrCodeImpl;
  var convertBase64StringToArrayBuffer = $foreign.convertBase64StringToArrayBufferImpl;
  var decodeBase64PngImageUri = function (s) {
      var base64String = Data_String_Common.replace("data:image/png;base64,")("")(s);
      var arrayBuf = convertBase64StringToArrayBuffer(base64String);
      return Control_Applicative.pure(Effect.applicativeEffect)($foreign.decodePngImpl(arrayBuf));
  };
  var scanQrCodeEff = function (s) {
      return function __do() {
          var img = decodeBase64PngImageUri(s)();
          var eitherCode = Effect_Exception["try"]($foreign.scanQrCodeEffImpl(img))();
          return Data_Bifunctor.bimap(Data_Bifunctor.bifunctorEither)(function (err) {
              return Effect_Exception.message(err);
          })(QrCode.create)(eitherCode);
      };
  };
  exports["Image"] = Image;
  exports["scanBarcode"] = scanBarcode;
  exports["QrCode"] = QrCode;
  exports["Barcode"] = Barcode;
  exports["createBase64PNGQrCode"] = createBase64PNGQrCode;
  exports["decodeBase64PngImageUri"] = decodeBase64PngImageUri;
  exports["scanQrCodeEff"] = scanQrCodeEff;
  exports["eqCode"] = eqCode;
  exports["showCode"] = showCode;
  exports["showImage"] = showImage;
  exports["eqImage"] = eqImage;
})(PS);
module.exports = PS["QrReader"];
